#+TITLE: init.el
#+PROPERTY: header-args :tangle yes :results silent

* Globals
#+BEGIN_SRC emacs-lisp
  ;; Disable splash screen
  (setq inhibit-startup-message t)

  (setf ring-bell-function 'ignore)

  (setq-default cursor-type 'bar)

  ;; Use dejavu to display greek symbols (Source Code Pro has really weird greek
  ;; characters)
  (set-fontset-font "fontset-default" 'greek "DejaVu Sans Mono")

  ;; Configure the *scratch* buffer
  (setf initial-scratch-message ""
        initial-major-mode 'emacs-lisp-mode)

  ;; Enable X clipboards
  (setf x-select-enable-clipboard t
        x-select-enable-primary t)

  ;; Put more information into the frame title
  (setf frame-title-format '("" invocation-name ": %b - " mode-name))

  ;; Enable all commands
  (mapatoms (lambda (s) (when (get s 'disabled) (put s 'disabled nil))))

  ;; Show column numbers
  (column-number-mode t)

  ;; y and n instead of yes and no
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Create new files and buffers without confirmation
  (setq confirm-nonexistent-file-or-buffer nil)
  (setq ido-create-new-buffer 'always)

  ;; Only GC every 100 MB
  (setq gc-cons-threshold (* 100 1024 1024))

  ;; Read 1M at a time from processes. Important for LSP performance.
  (setq read-process-output-max (* 1024 1024))

  ;; Indent with 2 spaces
  (setq-default indent-tabs-mode nil
                tab-width 2
                js-indent-level 2
                css-indent-offset 2
                sh-indentation 2
                web-mode-markup-indent-offset 2
                web-mode-code-indent-offset 2
                web-mode-css-indent-offset 2
                web-mode-attr-indent-offset 2)

  ;; Line breaks at 90 characters
  (setq-default fill-column 90)

  ;; I don't like the GNU style of two spaces after a period
  (setq-default sentence-end-double-space nil)

  ;; Append a newline at the end of files
  (setq require-final-newline t)

  ;; Disable backups and autosaves
  (setq backup-inhibited t)
  (setq auto-save-default nil)

  ;; Yank at point instead of position of cursor
  (setf mouse-yank-at-point t)

  ;; I do not like accidentally freezing my emacs instance
  (global-set-key (kbd "C-z") nil)
#+END_SRC

Automatically jump to origin file and line when an the point is on an error.

#+BEGIN_SRC emacs-lisp
  (add-hook 'compilation-mode-hook #'next-error-follow-minor-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Start a server for emacsclient
  (server-start)
#+END_SRC

* Packages

Packages are configured with the ~use-package~ macro.

#+BEGIN_SRC emacs-lisp
  ;; Make installed packages available for compilation as well as evaluation
  (eval-and-compile
    (package-initialize))

  ;; Load use-package to configure packages
  (eval-when-compile
    (require 'use-package))
  (require 'bind-key)
  (use-package use-package-chords
    :config (key-chord-mode t))
#+END_SRC

* Tramp Fix

Tramp by default tries to look for the availability of various config options by
running ~ssh~ against the host ~host.does.not.exist~ which leads to a wait until
timeout if you are connected to a SpeedPort router. This can be prevented by
setting the options before loading tramp.

#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :init
    (setq tramp-ssh-controlmaster-options
          "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no"))
#+END_SRC

* Utilities

The ~cqql~ package (conspicuously named after myself) contains several a loose
collection of utility functions and commands which is why it cannot be put
easily into one of the existing sections.

#+BEGIN_SRC emacs-lisp
  (use-package cqql
    :bind (("C-a" . cqql-go-to-beginning-of-line-dwim)
           ("M-D" . cqql-duplicate-text)
           ("C-S-k" . cqql-kill-line)
           ("C-o" . cqql-open-line)
           ("C-S-o" . cqql-open-line-above)
           ("C-S-p" . cqql-move-text-up)
           ("C-S-n" . cqql-move-text-down))
    :config
    (add-hook 'before-save-hook #'cqql-trim-whitespace))
#+END_SRC

** PATH

Teach emacs my modified ~PATH~ so that it can, for example, find local python
installations. We have to set ~exec-path-from-shell-arguments~ to ~""~ so that
it uses an interactive shell instead of a login one which would not read my
~.zshenv~ file, where ~PATH~ is initialized.

#+BEGIN_SRC emacs-lisp
  (setq exec-path-from-shell-arguments "")

  (exec-path-from-shell-initialize)
#+END_SRC

* UI

** Theme

#+BEGIN_SRC emacs-lisp
  (load-theme 'darktooth t)
  (darktooth-modeline-three)
#+END_SRC

** Mode Line

#+BEGIN_SRC emacs-lisp
  (use-package rich-minority
    :config
    ;; Hide all minor modes
    (setq rm-whitelist (list "")))

  (use-package smart-mode-line
    :config
    (setf sml/theme 'respectful
          sml/no-confirm-load-theme t)

    (sml/setup))
#+END_SRC

** Minibuffer

Save the minibuffer history.

#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :config
    (setf history-length 200)
    (savehist-mode))
#+END_SRC

** eldoc

#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :config (setf eldoc-idle-delay 0.2))
#+END_SRC

** Better Help

Displays all key bindings of the current major mode with one-line descriptions
in a condensed format.

#+BEGIN_SRC emacs-lisp
  (use-package discover-my-major
    :bind ("C-h C-m" . discover-my-major))
#+END_SRC

~helpful~ puts a lot of extra funcionality on help pages such as the source code
of functions.

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :bind (("C-h a" . helpful-command)
           ("C-h f" . helpful-callable)
           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key)
           :map emacs-lisp-mode-map
           ("C-c C-d" . helpful-at-point)))
#+END_SRC

** Better Selection

~ivy/swiper~ is a light-weight completion front end for emacs.

#+BEGIN_SRC emacs-lisp
  (defun cqql-find-file ()
    "Find files in projects and outside."
    (interactive)
    (if (projectile-project-p)
        (counsel-git)
      (counsel-find-file)))

  (defun cqql-counsel-rg-in-project-root ()
    "Run counsel-rg in the project root."
    (interactive)
    (let ((root (condition-case nil (projectile-project-root) (error nil))))
      ;; Search hidden files
      (counsel-rg nil root)))

  (use-package ivy
    :bind (("C-x C-f" . cqql-find-file)
           ("C-s" . swiper)
           ("M-x" . counsel-M-x)
           ("C-x 8" . counsel-unicode-char)
           ("C-c s" . cqql-counsel-rg-in-project-root)
           ("M-o" . ivy-resume)
           ("C-x b" . counsel-switch-buffer))
    :init
    (setq ivy-count-format "%d/%d "
          ivy-extra-directories (list ".")
          ivy-re-builders-alist '((t . ivy--regex-ignore-order))
          counsel-yank-pop-truncate-radius 3)
    :config
    (ivy-mode)
    (counsel-mode)
    (ivy-rich-mode)
    (ivy-prescient-mode))
#+END_SRC

** File search with rg

#+BEGIN_SRC emacs-lisp
  (use-package deadgrep
    :bind (("C-c S" . deadgrep)
           :map deadgrep-mode-map
           ("s" . cqql-deadgrep-search-term))
    :config
    (require 'cqql-deadgrep))
#+END_SRC

** Highlighting

*** Cursor

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :config
    (beacon-mode))
#+END_SRC

*** Delimiter

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

    (setf rainbow-delimiters-max-face-count 6))
#+END_SRC

*** Symbols

#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :config
    (add-hook 'prog-mode-hook 'highlight-symbol-mode)

    (setf highlight-symbol-idle-delay 0))
#+END_SRC

** Window Management

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind ("M-i" . ace-window))
#+END_SRC

** Buffer Management

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :bind ("C-x C-b" . ibuffer))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :config (setf uniquify-buffer-name-style 'forward
                  uniquify-strip-common-suffix t))
#+END_SRC

** File Management

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :config
    (setf dired-listing-switches "-lahv")

    (bind-key "M-w" #'wdired-change-to-wdired-mode dired-mode-map))
#+END_SRC

~dired-jump~ from ~dired-x~ is probably my most used ~dired~ command.

#+BEGIN_SRC emacs-lisp
  (use-package dired-x)
#+END_SRC

** Project Management

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (setq projectile-keymap-prefix (kbd "C-x p"))
    (setq projectile-completion-system 'ivy)
    :config
    (projectile-global-mode))
#+END_SRC

* Editing

** keychords

Increase the acceptable delay between two keys of key chord to make it easier to
active them.

#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :config
    (setq key-chord-two-keys-delay 0.25))
#+END_SRC

** Multiple Cursors

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :init
    (require 'hydra)
    (require 'multiple-cursors)
    (defhydra hydra-multiple-cursors (:hint nil)
      "
   Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
  ------------------------------------------------------------------
   [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
   [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
   [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
   [Click] Cursor at point       [_q_] Quit"
      ("l" mc/edit-lines :exit t)
      ("a" mc/mark-all-like-this :exit t)
      ("n" mc/mark-next-like-this)
      ("N" mc/skip-to-next-like-this)
      ("M-n" mc/unmark-next-like-this)
      ("p" mc/mark-previous-like-this)
      ("P" mc/skip-to-previous-like-this)
      ("M-p" mc/unmark-previous-like-this)
      ("s" mc/mark-all-in-region-regexp :exit t)
      ("0" mc/insert-numbers :exit t)
      ("A" mc/insert-letters :exit t)
      ("<mouse-1>" mc/add-cursor-on-click)
      ;; Help with click recognition in this hydra
      ("<down-mouse-1>" ignore)
      ("<drag-mouse-1>" ignore)
      ("q" nil))
    :bind (("C-c m" . hydra-multiple-cursors/body)
           :map mc/keymap
           ;; Make enter insert a newline instead of quitting mc
           ("<return>" . nil)))
#+END_SRC

** SmartParens

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :init
    (require 'hydra)
    (defhydra hydra-smartparens (:hint nil)
      "
   Moving^^^^                       Slurp & Barf^^   Wrapping^^            Sexp juggling^^^^               Destructive
  ------------------------------------------------------------------------------------------------------------------------
   [_a_] beginning  [_n_] down      [_h_] bw slurp   [_R_]   rewrap        [_S_] split   [_t_] transpose   [_c_] change inner  [_w_] copy
   [_e_] end        [_N_] bw down   [_H_] bw barf    [_u_]   unwrap        [_s_] splice  [_A_] absorb      [_C_] change outer
   [_f_] forward    [_p_] up        [_l_] slurp      [_U_]   bw unwrap     [_r_] raise   [_E_] emit        [_k_] kill          [_g_] quit
   [_b_] backward   [_P_] bw up     [_L_] barf       [_(__{__[_] wrap (){}[]   [_j_] join    [_o_] convolute   [_K_] bw kill       [_q_] quit"
      ;; Moving
      ("a" sp-beginning-of-sexp)
      ("e" sp-end-of-sexp)
      ("f" sp-forward-sexp)
      ("b" sp-backward-sexp)
      ("n" sp-down-sexp)
      ("N" sp-backward-down-sexp)
      ("p" sp-up-sexp)
      ("P" sp-backward-up-sexp)

      ;; Slurping & barfing
      ("h" sp-backward-slurp-sexp)
      ("H" sp-backward-barf-sexp)
      ("l" sp-forward-slurp-sexp)
      ("L" sp-forward-barf-sexp)

      ;; Wrapping
      ("R" sp-rewrap-sexp)
      ("u" sp-unwrap-sexp)
      ("U" sp-backward-unwrap-sexp)
      ("(" sp-wrap-round)
      ("{" sp-wrap-curly)
      ("[" sp-wrap-square)

      ;; Sexp juggling
      ("S" sp-split-sexp)
      ("s" sp-splice-sexp)
      ("r" sp-raise-sexp)
      ("j" sp-join-sexp)
      ("t" sp-transpose-sexp)
      ("A" sp-absorb-sexp)
      ("E" sp-emit-sexp)
      ("o" sp-convolute-sexp)

      ;; Destructive editing
      ("c" sp-change-inner :exit t)
      ("C" sp-change-enclosing :exit t)
      ("k" sp-kill-sexp)
      ("K" sp-backward-kill-sexp)
      ("w" sp-copy-sexp)

      ("q" nil)
      ("g" nil))
    :config
    (require 'smartparens-config)

    (bind-keys :map smartparens-mode-map
      ("C-M-f" . sp-forward-sexp)
      ("C-M-b" . sp-backward-sexp)
      ("C-M-n" . sp-down-sexp)
      ("C-M-S-n" . sp-backward-down-sexp)
      ("C-M-p" . sp-up-sexp)
      ("C-M-S-p" . sp-backward-up-sexp)
      ("C-M-a" . sp-beginning-of-sexp)
      ("C-M-e" . sp-end-of-sexp)
      ("C-M-k" . sp-kill-sexp)
      ("C-M-t" . sp-transpose-sexp))

    (smartparens-global-mode t)
    (smartparens-strict-mode t)
    (show-smartparens-global-mode t)

    ;; We write it the verbose way instead of with sp-with-modes because
    ;; use-package does not properly expand the macro somehow during compilation
    (sp-local-pair sp--html-modes "{{" "}}")
    (sp-local-pair sp--html-modes "{%" "%}")
    (sp-local-pair sp--html-modes "{#" "#}")

    :chords (("fd" . hydra-smartparens/body)))
#+END_SRC

** Region

#+BEGIN_SRC emacs-lisp
  (use-package wrap-region
    :config (wrap-region-global-mode t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind (("M-m" . er/expand-region)
           ("M-M" . er/contract-region))
    :config
    (with-eval-after-load 'latex-mode
      (require 'latex-mode-expansions)))
#+END_SRC

** Replacing

Gives you a visual preview at the point of replacement.

#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :bind (("C-c r" . vr/replace)
           ("C-c R" . vr/query-replace)))
#+END_SRC

** Navigation

Quickly move to every word and character on screen.

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :init
    (require 'hydra)
    (defhydra hydra-avy (:exit t :hint nil)
      "
   Line^^       Region^^        Goto
  ----------------------------------------------------------
   [_y_] yank   [_Y_] yank      [_c_] timed char  [_C_] char
   [_m_] move   [_M_] move      [_w_] word        [_W_] any word
   [_k_] kill   [_K_] kill      [_l_] line        [_L_] end of line"
      ("c" avy-goto-char-timer)
      ("C" avy-goto-char)
      ("w" avy-goto-word-1)
      ("W" avy-goto-word-0)
      ("l" avy-goto-line)
      ("L" avy-goto-end-of-line)
      ("m" avy-move-line)
      ("M" avy-move-region)
      ("k" avy-kill-whole-line)
      ("K" avy-kill-region)
      ("y" avy-copy-line)
      ("Y" avy-copy-region))
    :config
    (setq avy-timeout-seconds 0.25)

    :bind (("M-s" . avy-goto-char-timer)
           ("C-c a" . hydra-avy/body)))
#+END_SRC

Use smart beginning and end moves instead of just ~point-min~ and ~point-max~.

#+BEGIN_SRC emacs-lisp
  (use-package beginend
    :config
    (beginend-global-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package smartscan
    :hook (prog-mode . smartscan-mode)
    :custom
    ;; Look for symbols instead of words so that it works with UTF-8 identifiers
    (smartscan-symbol-selector "symbol"))
#+END_SRC

* Code Intelligence

** Language Server Protocol (LSP)

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-auto-guess-root t
          lsp-auto-require-clients nil
          lsp-auto-configure t)
    :hook ((julia-mode . lsp))
    :commands (lsp)
    :config
    (define-advice lsp--render-string (:filter-args (args) replace-html-spaces)
      "Replace HTML space entities from Microsoft's python language server with actual spaces."
      (cons (s-replace "&nbsp;" " " (car args)) (cdr args)))

    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection '("rls"))
                      :major-modes '(rust-mode)
                      :server-id 'rls))

    (require 'hydra)
    (defhydra hydra-lsp (:exit t :hint nil)
      "
   Buffer^^               Server^^                   Symbol
  -------------------------------------------------------------------------------------
   [_f_] format           [_M-r_] restart            [_d_] declaration  [_i_] implementation  [_o_] documentation
   [_m_] imenu            [_S_]   shutdown           [_D_] definition   [_t_] type            [_r_] rename
   [_x_] execute action   [_M-s_] describe session   [_R_] references   [_s_] signature"
      ("d" lsp-find-declaration)
      ("D" lsp-ui-peek-find-definitions)
      ("R" lsp-ui-peek-find-references)
      ("i" lsp-ui-peek-find-implementation)
      ("t" lsp-find-type-definition)
      ("s" lsp-signature-help)
      ("o" lsp-describe-thing-at-point)
      ("r" lsp-rename)

      ("f" lsp-format-buffer)
      ("m" lsp-ui-imenu)
      ("x" lsp-execute-code-action)

      ("M-s" lsp-describe-session)
      ("M-r" lsp-restart-workspace)
      ("S" lsp-shutdown-workspace))

    :bind (("C-c l" . hydra-lsp/body)))

  (use-package lsp-ui
    :bind (:map lsp-ui-mode-map
                ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
                ([remap xref-find-references] . lsp-ui-peek-find-references)))

  (use-package lsp-julia
    :init
    (setq lsp-julia-package-dir nil))
#+END_SRC

** Auto-Completion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind ("C-M-SPC" . company-complete)
    :init
    (setf company-idle-delay 0
          company-minimum-prefix-length 2
          company-show-numbers t
          company-selection-wrap-around t
          company-backends (list #'company-capf
                                 (list #'company-dabbrev-code
                                       #'company-keywords)
                                 #'company-files
                                 #'company-dabbrev))
    :config
    (global-company-mode t))

  (use-package company-dabbrev
    :init
    (setf company-dabbrev-ignore-case 'keep-prefix
          company-dabbrev-ignore-invisible t
          company-dabbrev-downcase nil))

#+END_SRC

** Complete from elsewhere

#+BEGIN_SRC emacs-lisp
  (use-package hippie-exp
    :bind ("M-/" . hippie-expand)
    :init
    (setf hippie-expand-try-functions-list
          '(try-expand-dabbrev-visible
            try-expand-dabbrev
            try-expand-dabbrev-all-buffers
            try-expand-line
            try-complete-lisp-symbol)))
#+END_SRC

** Snippets

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (setf yas-fallback-behavior 'call-other-command
          yas-snippet-dirs '("~/.emacs.d/snippets"))

    ;; Don't append newlines to snippet files
    (add-hook 'snippet-mode (lambda () (setq require-final-newline nil)))

    (yas-global-mode t)

    :bind (:map yas-minor-mode-map
                (";" . 'yas-expand)
                ("<tab>" . nil)
                ("TAB" . nil)))
#+END_SRC

* Integrations

** git

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("<f2>" . magit-status)
           ("<f5>" . magit-file-dispatch))
    :init
    (setq magit-last-seen-setup-instructions "1.4.0"
          magit-commit-ask-to-stage nil
          magit-push-always-verify nil)

    :config
    (require 'git-timemachine)
    (transient-append-suffix 'magit-file-dispatch "t" (list 1 "T" "Timemachine" #'git-timemachine)))
#+END_SRC

** dict.cc

#+BEGIN_SRC emacs-lisp
  (use-package dictcc
    :bind ("C-c d" . dictcc))
#+END_SRC

** Debugging

#+BEGIN_SRC emacs-lisp
  (use-package realgud)
#+END_SRC

* Writing

Put emacs into distraction-free writing mode on demand.

#+BEGIN_SRC emacs-lisp
  (use-package darkroom
    :bind (:map text-mode-map
                ("C-c D" . #'darkroom-mode))

    :config
    (setq darkroom-text-scale-increase 1.5))
#+END_SRC

** Linting

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (setq flycheck-textlint-config ".config/textlintrc.yml")
    (add-to-list 'flycheck-textlint-plugin-alist '(tex-mode . "latex2e"))
    (add-to-list 'flycheck-textlint-plugin-alist '(rst-mode . "rst"))

    (add-hook 'markdown-mode-hook #'flycheck-mode))
#+END_SRC

* Programming Languages

** Python

#+BEGIN_SRC emacs-lisp
  (use-package pyenv-mode)

  (defmacro with-pyenv (name &rest body)
    "Execute BODY with pyenv NAME activated."
    (declare (indent defun))
    `(let ((current (pyenv-mode-version)))
       (unwind-protect
           (progn
             (pyenv-mode-set ,name)
             ,@body)
         ;; Ensure that the python environment is exactly the same as before
         (if current
             (pyenv-mode-set current)
           (pyenv-mode-unset)))))

  (defun cqql-python-shell-send-line ()
    "Send the current line to inferior python process disregarding indentation."
    (interactive)
    (let ((start (save-excursion
                   (back-to-indentation)
                   (point)))
          (end (save-excursion
                 (end-of-line)
                 (point))))
      (python-shell-send-string (buffer-substring start end))))

  (require 'cl-lib)

  (defvar cqql-python-last-command nil
    "Stores the last sent region for resending.")

  (defun cqql-python-shell-send-region ()
    "Send the current region to inferior python process stripping indentation."
    (interactive)
    (let* ((start (save-excursion
                    (goto-char (region-beginning))
                    (beginning-of-line)
                    (point)))
           (end (save-excursion
                  (goto-char (region-end))
                  (end-of-line)
                  (point)))
           (region (buffer-substring start end))
           (command))
      ;; Strip indentation
      (with-temp-buffer
        (insert region)

        ;; Clear leading empty lines
        (goto-char (point-min))
        (while (char-equal (following-char) ?\n)
          (delete-char 1))

        ;; Remove indentation from all non-empty lines
        (let ((indent (save-excursion
                        (back-to-indentation)
                        (- (point) (point-min)))))
          (cl-loop until (eobp)
                   do
                   ;; Make sure that we do not delete empty lines or lines with
                   ;; only spaces but fewer than indent
                   (cl-loop repeat indent
                            while (char-equal (following-char) ?\s)
                            do (delete-char 1))
                   (forward-line 1)))
        (setq command (buffer-string)))
      (setq cqql-python-last-command command)
      (python-shell-send-string command)))

  (defun cqql-python-shell-resend-last-command ()
    "Resend the last command to the inferior python process."
    (interactive)
    (when cqql-python-last-command
      (python-shell-send-string cqql-python-last-command)))

  (defun cqql-python-shell-send-region-dwim ()
    "Send active region or resend last region."
    (interactive)
    (if (use-region-p)
        (cqql-python-shell-send-region)
      (cqql-python-shell-resend-last-command)))

  (defun cqql-python-reformat-buffer ()
    "Reformat the current buffer."
    (interactive)
    (isortify-buffer)
    (blacken-buffer))

  (defun cqql-enable-company-anaconda ()
    "Use anaconda as a company backend."
    (add-to-list 'company-backends 'company-anaconda))

  (use-package python
    :bind (:map python-mode-map
                ("C-c D" . #'realgud:pdb)
                ("C-c f" . #'cqql-python-reformat-buffer)
                ("C-c C-l" . #'cqql-python-shell-send-line)
                ("C-c C-r" . #'cqql-python-shell-send-region-dwim)
                ("C-c t" . #'python-pytest-popup))

    :config
    (when (executable-find "ipython")
      (setq python-shell-interpreter "ipython"
            ;; Disable ipython 5 features that are incompatible with
            ;; inferior-python
            python-shell-interpreter-args "--simple-prompt")
      (push "ipython" python-shell-completion-native-disabled-interpreters))

    (setq python-fill-docstring-style 'pep-257-nn)

    (add-hook 'python-mode-hook #'eldoc-mode)
    (add-hook 'python-mode-hook #'subword-mode)
    (add-hook 'python-mode-hook #'pyenv-mode)
    (add-hook 'python-mode-hook #'python-docstring-mode)
    (add-hook 'python-mode-hook #'anaconda-mode)
    (add-hook 'python-mode-hook #'cqql-enable-company-anaconda))

  (use-package python-pytest
    :bind (:map python-pytest-mode-map
                ("q" . #'bury-buffer)))

  (use-package python-docstring
    :config
    (setq python-docstring-sentence-end-double-space nil))

  (use-package blacken
    :config
    (setq blacken-allow-py36 t))

  (use-package pip-requirements)

  (use-package ein)
#+END_SRC

** Julia

#+BEGIN_SRC emacs-lisp
  (use-package julia-mode)

  (defun cqql-julia-repl-with-sysimage ()
    "Start a julia REPL with a sysimage in the project root."
    (interactive)
    (let* ((project-root (locate-dominating-file (buffer-file-name) "Project.toml"))
           (sysimage (if project-root (f-join project-root "sysimage.so")))
           (julia-repl-switches (if (f-exists-p sysimage) (concat "--sysimage " sysimage))))
      (julia-repl)))

  (use-package julia-repl
    :hook ((julia-mode . julia-repl-mode))
    :bind (:map julia-repl-mode-map
           ("C-c C-z" . cqql-julia-repl-with-sysimage))
    :config
    (add-to-list 'julia-repl-captures (kbd "M-i"))

    (add-hook 'julia-repl-hook #'julia-repl-use-emacsclient))
#+END_SRC

** Emacs Lisp

#+BEGIN_SRC emacs-lisp
  (defun cqql-run-all-ert-tests ()
    "Run all ert tests defined."
    (interactive)
    (ert t))

  (use-package macrostep)

  (use-package lisp-mode
    :config
    (bind-key "C-h C-f" 'find-function emacs-lisp-mode-map)
    (bind-key "C-c e t" 'cqql-run-all-ert-tests emacs-lisp-mode-map)
    (bind-key "C-c e b" 'eval-buffer emacs-lisp-mode-map)
    (bind-key "C-c e m" 'macrostep-expand emacs-lisp-mode-map)

    (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
    (add-hook 'emacs-lisp-mode-hook 'flycheck-mode)
    (add-hook 'emacs-lisp-mode-hook 'smartparens-strict-mode))
#+END_SRC

** Shell

#+BEGIN_SRC emacs-lisp
  (use-package sh-script
    :mode ("PKGBUILD\\'" . sh-mode)
    :config  (setq-default sh-basic-offset 2))
#+END_SRC

** Rust

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :config
    (add-hook 'rust-mode-hook #'flycheck-mode)
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'rust-mode-hook #'cargo-minor-mode))

  (use-package racer
    :config
    (add-hook 'racer-mode-hook #'eldoc-mode))

  (use-package flycheck
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC

** COMMENT C/C++

#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :mode ("\\.h\\'" . c++-mode)
    :config
    (require 'cqql)
    (bind-key "<C-return>" #'cqql-c-append-semicolon c-mode-base-map)
    (bind-key "C-c C-c" #'recompile c-mode-base-map)
    (bind-key "C-c C-o" #'ff-find-other-file c-mode-base-map)
    (bind-key "C-c f" #'clang-format-buffer c-mode-base-map)

    (add-hook 'c++-mode-hook #'subword-mode)
    (add-hook 'c++-mode-hook #'eglot-ensure))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package cquery
    :config
    (setq cquery-project-root-function #'projectile-project-root
          cquery-extra-init-params (list :index '(:comments 2)
                                         :cacheFormat "msgpack"
                                         :completion '(:detailedLabel t))))
#+END_SRC

*** Style Guide

#+BEGIN_SRC emacs-lisp
  (use-package google-c-style
    :demand t
    :config
    (add-hook 'c-mode-common-hook #'google-set-c-style))
#+END_SRC

*** Build Tools

#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode)
#+END_SRC

** COMMENT javascript

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :mode (("\\.js\\'" . js2-mode) ("\\.jsx\\'" . js2-mode))
    :interpreter "node"
    :config
    (require 'js2-refactor)

    (setq-default js2-basic-offset 2)
    (setf js2-highlight-level 3
          js2-include-node-externs t)

    (js2r-add-keybindings-with-prefix "C-c r")

    (add-hook 'js2-mode-hook 'subword-mode))
#+END_SRC

* Text Formats

** LaTeX

#+BEGIN_SRC emacs-lisp
  (use-package tex-mode
    :mode ("\\.tex\\'" . LaTeX-mode)
    :config
    ;; Workaround for smartparens overwriting `
    (require 'smartparens-latex)

    (require 'tex-site)
    (require 'preview)

    (require 'cqql)
    (bind-key "<C-return>" #'cqql-latex-append-line-break TeX-mode-map)

    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
    (add-hook 'LaTeX-mode-hook 'reftex-mode)
#+END_SRC

LaTeX tables are really horrible to create and edit for most simple
use-cases. But ~org-mode~ comes to our rescue. Simply enabling ~org-table-mode~
gives you automatically resizing ASCII tables everywhere and you can even export
them to LaTeX!

#+BEGIN_SRC emacs-lisp
    (add-hook 'LaTeX-mode-hook #'orgtbl-mode)
    (add-hook 'LaTeX-mode-hook #'flycheck-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook (lambda () (setq word-wrap t)))

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (setq TeX-electric-sub-and-superscript t
                    TeX-save-query nil
                    ;; Otherwise minted can't find pygments
                    TeX-command-extra-options "-shell-escape")
              (setf (cdr (assoc 'output-pdf TeX-view-program-selection)) (list "Evince")))))
#+END_SRC

** org

#+BEGIN_SRC emacs-lisp
  (defun cqql-open-notes-file ()
    "Open the default org file."
    (interactive)
    (find-file (concat org-directory
                       "/"
                       org-default-notes-file)))

  (use-package org
    :init
    (setf org-directory "~/notes"
          org-agenda-files (list org-directory)
          org-default-notes-file "notes.org"
          org-crypt-key nil
          org-tags-exclude-from-inheritance (list "crypt")
          org-startup-indented t
          org-M-RET-may-split-line nil
          org-enforce-todo-dependencies t
          org-enforce-todo-checkbox-dependencies t
          org-agenda-start-on-weekday nil)

    :config
    (require 'org-crypt)
    (org-crypt-use-before-save-magic)

    ;; Configure org-babel
    (setf org-src-fontify-natively t
          org-babel-load-languages '((emacs-lisp . t)
                                     (python . t)
                                     (shell . t)))

    ;; Load language support
    (org-babel-do-load-languages
     'org-babel-load-languages
     org-babel-load-languages)

    (add-hook 'org-mode-hook #'flycheck-mode))
#+END_SRC

Use some nice UTF-8 symbols to signify the nesting depth.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

** reStructuredText

#+BEGIN_SRC emacs-lisp
  (defun cqql-length-of-line ()
    "Return length of the current line."
    (save-excursion
      (- (progn (end-of-line) (point))
         (progn (beginning-of-line) (point)))))

  (defun cqql-underline ()
    "Repeat the character at point until it stretches the length of
    the previous line."
    (interactive)
    (let* ((char (preceding-char))
           (prev-length (save-excursion
                          (forward-line -1)
                          (cqql-length-of-line)))
           (curr-length (save-excursion
                          (cqql-length-of-line)))
           (repeat-length (max 0 (- prev-length curr-length))))
      (insert (s-repeat repeat-length (char-to-string char)))))

  (use-package rst
    :config
    (bind-key "<C-right>" #'cqql-underline rst-mode-map)

    (add-hook 'rst-mode-hook #'flycheck-mode))
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC

** HTML/jinja2

#+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :mode "\\.html\\.?"
      :config
      ;; Disable inserting closing parens etc. because we have smartparens already
      (setq web-mode-enable-auto-pairing nil))
#+END_SRC
